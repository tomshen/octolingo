<?xml version="1.0" encoding="UTF-8" ?>
<Module>
  <ModulePrefs title="Translate Me Maybe">
    <Require feature="rpc"/>
    <Require feature="views"/>
  </ModulePrefs>
  <Content type="html">
    <![CDATA[
      <script src="//plus.google.com/hangouts/_/api/v1/hangout.js"></script>

      <style>
        #container {
          background-color: black;
          color: white;
          font-size: 18px;
          font-family: "Open Sans", arial, helvetica;
        }

        .language-selector {
          list-style-type: none;
          margin: 0;
          padding: 0;
          padding: 18px;
          text-align: center;
          border-bottom: 1px solid white;
          height: 150px;
        }

        .language-selector li {
          display: inline;
          background-color: green;
          margin: 0;
          padding: 9px;
          cursor: pointer;
        }

        .language-selector li.is-selected, .language-selector li:hover {
          background-color: blue;
        }

        .chat-element {
          padding: 9px;
        }

        .chat-sender {
          text-transform: uppercase;
          font-size: 0.61em;
          letter-spacing: 0.2em;
          opacity: 0.6;
        }
      </style>

     <script src="//ajax.googleapis.com/ajax/libs/jquery/2.0.3/jquery.min.js"></script>

      <script id="lib">
        C = {};

        C.LANGUAGES = {
          "English":"en",
          "French":"fr",
          "Spanish":"es",
          "Italian":"it",
          "German":"de",
          "Japanese":"ja",
          "Korean":"ko",
          "Chinese":"zh"
        }
        </script>

      <script id="Message-model">
var Message, apiKey, initSpeechRecognition;

apiKey = 'AIzaSyDUpThQIyJRlszXEnT2HvSMbPbObbcYNE4';

initSpeechRecognition = function(language, onresult) {
  var recognition;
  recognition = new webkitSpeechRecognition();
  recognition.continuous = true;
  recognition.interminResults = false;
  recognition.onstart = function() {
    return recognition.lang = language;
  };
  recognition.onresult = onresult;
  recognition.onerror = function(err) {
    return console.error(err);
  };
  recognition.onend = function() {};
  return recognition;
};

Message = (function() {
  function Message(speaker, text, language) {
    this.speaker = speaker;
    this.text = text;
    this.language = language;
  }

  Message.speak = function(message) {
    var msg;
    msg = new SpeechSynthesisUtterance();
    msg.text = message.text;
    msg.lang = message.language;
    return window.speechSynthesis.speak(msg);
  };

  Message.translate = function(message, targetLanguage, callback) {
    if (message.language === targetLanguage) {
      return callback(message);
    }
    return $.getJSON("https://www.googleapis.com/language/translate/v2?key=" + apiKey + "&q=" + message.text + "&source=" + message.language + "&target=" + targetLanguage, function(data) {
      return callback(new Message(message.speaker, data.data.translations[0].translatedText, targetLanguage));
    });
  };

  return Message;

})();
      </script>

      <script id="Message-handler" >
        function MessageHandler(id, onLanguageChange) {
          this.messages = [];
          this.languages = [];
          this.$container = $("#" + id);
          this.selectedLanguage = {};

          this.onLanguageChange = onLanguageChange;
        }


        //Takes two strings, a message and a sender
        //and returns at jQuery object with that message.
        MessageHandler.prototype._createMessage = function(message) {
          var messageTemplate = "<div class='chat-element'><span class='chat-sender'>{{SENDER}}</span> <span class='chat-message'>{{CONTENT}}</span></div>";

          var message = messageTemplate.replace("{{SENDER}}", message.sender).replace("{{CONTENT}}", message.text);

          $message = $(message);

          return $message;
        }

        //Takes an element from the language object
        //and returns a jquery object made from that element
        MessageHandler.prototype._createLanguageButton = function(language) {
          var languageButtonTemplate = "<li{{SELECTED}}>{{LANGUAGE}}</li>";

          if(language === this.selectedLanguage) {
            var selected = true;
          }

          if(selected) {
            var languageButton = languageButtonTemplate.replace("{{LANGUAGE}}", language.name).replace("{{SELECTED}}", " class='is-selected'");
          }
          else {
            var languageButton = languageButtonTemplate.replace("{{LANGUAGE}}", language.name).replace("{{SELECTED}}", "");
          }

          $languageButton = $(languageButton);

          if(selected) {
            this.selectedLanguageButton = $languageButton;
          }

          var handlerReference = this;

          $languageButton.click(function() {
            if(language != handlerReference.selectedLanguage) {
              $this = $(this);
              $this.addClass("is-selected");
              if(handlerReference.selectedLanguageButton)
                handlerReference.selectedLanguageButton.removeClass("is-selected");

              handlerReference.selectedLanguage = language;
              handlerReference.selectedLanguageButton = $this;
              handlerReference.onLanguageChange(language);
            }
          })

          return $languageButton;
        }


        MessageHandler.prototype._fillChat = function() {
          var $chatWindow = $("<div class='chat-window'></div>");

          for (var i = 0; i < this.messages.length; i++) {
            $chatWindow.append(this._createMessage(this.messages[i]));
          };


          return $chatWindow;
        }


        //Populate the language selector
        MessageHandler.prototype._fillLanguageSelector = function() {
          var $languageSelector = $("<div class='language-selector'></div>");
          for (var i = 0; i < C.LANGUAGES.length; i++) {
            $languageSelector.append(this._createLanguageButton(C.LANGUAGES[i]));
          };

          return $languageSelector;
        }

        MessageHandler.prototype._fillMessageHandler = function() {
          this.$container.empty();
          this.$container.append(this._fillLanguageSelector());
          this.$container.append(this._fillChat());
        }

        //Start the message handler (fill it with content)
        MessageHandler.prototype.start = function() {
          this._fillMessageHandler();
        }


        //Create a new message and refresh the sender
        MessageHandler.prototype.newMessage = function(message) {
          this.messages.push(newMessage.translate(this.selectedLanguage));

          this._fillMessageHandler();
        }
      </script>


      <div id="container">
      </div>


      <script id="app" type="text/javascript">
        var speechRecognition = null;
        var a = new MessageHandler("container", function (language) {
          speechRecognition.lang = C.LANGUAGES[language];
        });
        speechRecognition = initSpeechRecognition("en", function (event) {
          a.newMessage(new Message(gapi.hangout.getLocalParticipant().person.name,
            event.results[event.resultIndex][0].transcript, a.selectedLanguage))
        });

        a.start();
      </script>
    ]]>
  </Content>
</Module>